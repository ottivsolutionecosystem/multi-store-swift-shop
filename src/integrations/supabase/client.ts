
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://dkliovgbxuskqmnfojvp.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRrbGlvdmdieHVza3FtbmZvanZwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg0MTcyMDgsImV4cCI6MjA2Mzk5MzIwOH0.w1EKr-ae-jK6_WRKMuvbZ2tbfJ0qaPeyh4uJ2eF2BBw";

// Enhanced Supabase client configuration to fix auth.uid() issues
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'X-Client-Info': 'supabase-js-web'
    }
  },
  db: {
    schema: 'public'
  }
});

// Enhanced auth utilities for debugging and recovery
export const AuthRecoveryUtils = {
  async forceTokenRefresh(): Promise<boolean> {
    console.log('AuthRecoveryUtils - forcing token refresh...');
    try {
      const { data, error } = await supabase.auth.refreshSession();
      if (error) {
        console.error('AuthRecoveryUtils - refresh failed:', error);
        return false;
      }
      console.log('AuthRecoveryUtils - refresh successful:', !!data.session);
      return !!data.session;
    } catch (error) {
      console.error('AuthRecoveryUtils - refresh error:', error);
      return false;
    }
  },

  async validateCurrentSession(): Promise<boolean> {
    console.log('AuthRecoveryUtils - validating current session...');
    try {
      const { data: { session }, error } = await supabase.auth.getSession();
      if (error || !session) {
        console.log('AuthRecoveryUtils - no valid session found');
        return false;
      }

      // Check if token is expired
      const now = Math.floor(Date.now() / 1000);
      const expiresAt = session.expires_at || 0;
      
      if (now >= expiresAt) {
        console.log('AuthRecoveryUtils - session expired, attempting refresh');
        return await this.forceTokenRefresh();
      }

      console.log('AuthRecoveryUtils - session is valid');
      return true;
    } catch (error) {
      console.error('AuthRecoveryUtils - validation error:', error);
      return false;
    }
  },

  async cleanAuthStorage(): Promise<void> {
    console.log('AuthRecoveryUtils - cleaning auth storage...');
    
    // Clear all potential auth-related keys
    const keysToRemove = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && (key.startsWith('supabase.auth.') || key.includes('sb-'))) {
        keysToRemove.push(key);
      }
    }
    
    keysToRemove.forEach(key => {
      console.log('AuthRecoveryUtils - removing key:', key);
      localStorage.removeItem(key);
    });

    // Also clear sessionStorage
    for (let i = 0; i < sessionStorage.length; i++) {
      const key = sessionStorage.key(i);
      if (key && (key.startsWith('supabase.auth.') || key.includes('sb-'))) {
        sessionStorage.removeItem(key);
      }
    }
  },

  async testDatabaseConnection(): Promise<{ success: boolean; userId?: string; error?: any }> {
    console.log('AuthRecoveryUtils - testing database connection...');
    try {
      const { data: { user }, error: userError } = await supabase.auth.getUser();
      if (userError || !user) {
        return { success: false, error: userError };
      }

      // Test a simple query to see if auth.uid() works
      const { data, error } = await supabase
        .from('profiles')
        .select('id')
        .eq('id', user.id)
        .limit(1);

      if (error) {
        console.error('AuthRecoveryUtils - database test failed:', error);
        return { success: false, userId: user.id, error };
      }

      console.log('AuthRecoveryUtils - database test successful');
      return { success: true, userId: user.id };
    } catch (error) {
      console.error('AuthRecoveryUtils - connection test error:', error);
      return { success: false, error };
    }
  }
};
